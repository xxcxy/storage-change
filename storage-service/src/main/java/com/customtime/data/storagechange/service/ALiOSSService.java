package com.customtime.data.storagechange.service;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import java.util.Map.Entry;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.springframework.stereotype.Service;import com.aliyun.openservices.ClientConfiguration;import com.aliyun.openservices.ClientException;import com.aliyun.openservices.oss.OSSClient;import com.aliyun.openservices.oss.OSSException;import com.aliyun.openservices.oss.model.Bucket;import com.aliyun.openservices.oss.model.CompleteMultipartUploadRequest;import com.aliyun.openservices.oss.model.GetObjectRequest;import com.aliyun.openservices.oss.model.InitiateMultipartUploadRequest;import com.aliyun.openservices.oss.model.InitiateMultipartUploadResult;import com.aliyun.openservices.oss.model.ListMultipartUploadsRequest;import com.aliyun.openservices.oss.model.ListObjectsRequest;import com.aliyun.openservices.oss.model.ListPartsRequest;import com.aliyun.openservices.oss.model.MultipartUpload;import com.aliyun.openservices.oss.model.MultipartUploadListing;import com.aliyun.openservices.oss.model.OSSObject;import com.aliyun.openservices.oss.model.OSSObjectSummary;import com.aliyun.openservices.oss.model.ObjectListing;import com.aliyun.openservices.oss.model.ObjectMetadata;import com.aliyun.openservices.oss.model.PartETag;import com.aliyun.openservices.oss.model.PartListing;import com.aliyun.openservices.oss.model.PartSummary;import com.aliyun.openservices.oss.model.PutObjectResult;import com.aliyun.openservices.oss.model.UploadPartRequest;import com.aliyun.openservices.oss.model.UploadPartResult;import com.customtime.data.storagechange.service.bean.FileObject;import com.customtime.data.storagechange.service.bean.IntermedObject;import com.customtime.data.storagechange.service.bean.MultiInfo;import com.customtime.data.storagechange.service.bean.PartInfo;import com.customtime.data.storagechange.service.bean.SKey;import com.customtime.data.storagechange.service.exception.OperatorException;import com.customtime.data.storagechange.service.util.Constants;import com.customtime.data.storagechange.service.util.DateUtil;import com.customtime.data.storagechange.service.util.IntermedObjectUtil;import com.customtime.data.storagechange.service.util.ListUtil;import com.customtime.data.storagechange.service.util.StringUtil;@Servicepublic class ALiOSSService implements CSService{	private static final Log logger = LogFactory.getLog(ALiOSSService.class);	public static void main(String[] args) {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,"Dvuhyf4nNFhChKaV","62RCHTPornY3pMDpur3p7kZa2qQgpL",config);		ListObjectsRequest lor = new ListObjectsRequest("oss2bcs");		lor.setPrefix("中文try/");		lor.setDelimiter("/");		ObjectListing ObjectListing = client.listObjects(lor);		List<OSSObjectSummary> listDeletes = ObjectListing.getObjectSummaries();		List<String> dir = ObjectListing.getCommonPrefixes();		for(OSSObjectSummary os:listDeletes){			logger.info(os.getKey());			System.out.println(os.getETag());			System.out.println(os.getSize());		}		for(String str:dir){			logger.info(str);		}//		File file = new File("F:\\相片\\main_eBOA_110799h019117.jpg");//        ObjectMetadata objectMeta = new ObjectMetadata();//        objectMeta.setContentLength(file.length());//        objectMeta.setContentType("image/jpeg");//        try {//			InputStream input = new FileInputStream(file);//			PutObjectResult pr = client.putObject("oss2bcs", "中文try/shuai.jpg", input, objectMeta);//			logger.debug(pr.getETag());//		} catch (OSSException e) {//			e.printStackTrace();//		} catch (FileNotFoundException e) {//			e.printStackTrace();//		} catch (ClientException e) {//			e.printStackTrace();//		}	}		public boolean putFiles(List<IntermedObject> intermedObjects,String accessId,String accessKey,String bucketName){		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,accessId,accessKey,config);		if(!client.doesBucketExist(bucketName)){			 client.createBucket(bucketName);		}		for(IntermedObject intermedObject:intermedObjects){	        try {				client.putObject(bucketName, intermedObject.getObjectName(), intermedObject.getContext(), IntermedObjectUtil.convertALiOssObjectMetadata(intermedObject));	        } catch (OSSException e) {				e.printStackTrace();			} catch (ClientException e) {				e.printStackTrace();			}		}		return true;	}		public boolean isBucketExist(String bucketName,SKey key) {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,key.getKeyId(),key.getKeySecret(),config);		return client.doesBucketExist(bucketName);	}		public void createBucket(String bucketName,SKey key)throws OperatorException {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,key.getKeyId(),key.getKeySecret(),config);		try{			client.createBucket(bucketName);		} catch (Exception e) {			e.printStackTrace();			throw new OperatorException(e.getMessage());		}	}		public IntermedObject getObject(String bucketName, String fileName,SKey key)throws OperatorException {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,key.getKeyId(),key.getKeySecret(),config);		OSSObject ossobj = null;		try {			ossobj = client.getObject(bucketName, fileName);		} catch (Exception e) {			e.printStackTrace();			throw new OperatorException(e.getMessage());		}		if(ossobj!=null){			return IntermedObjectUtil.convertIntermedObject(ossobj);		}else			return null;			}		public boolean putObject(String bucketName,IntermedObject intermedObject,SKey key)throws OperatorException {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,key.getKeyId(),key.getKeySecret(),config);		PutObjectResult pr = null;		try {			pr = client.putObject(bucketName, intermedObject.getObjectName(), intermedObject.getContext(),IntermedObjectUtil.convertALiOssObjectMetadata(intermedObject));		} catch (Exception e) {			e.printStackTrace();			throw new OperatorException(e.getMessage());		}		if(pr!=null && StringUtil.isNotBlank(pr.getETag())&&pr.getETag().equalsIgnoreCase(intermedObject.getMD5String()))			return true;		else			return false;	}		public List<String> listObject(String bucketName, SKey key)throws OperatorException {		List<String> fileNames = new ArrayList<String>();		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,key.getKeyId(),key.getKeySecret(),config);		ObjectListing objs = null;		try{			objs = client.listObjects(bucketName);		} catch (Exception e) {			e.printStackTrace();			throw new OperatorException(e.getMessage());		}		if(objs!=null){			for(OSSObjectSummary os:objs.getObjectSummaries()){				fileNames.add(os.getKey());			}		}		return fileNames;	}		public IntermedObject getObject(String bucketName, String fileName,			PartInfo partInfo, SKey key) throws OperatorException {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,key.getKeyId(),key.getKeySecret(),config);		OSSObject ossobj = null;		try {			GetObjectRequest go = new GetObjectRequest(bucketName, fileName);			go.setRange(partInfo.getStart(),partInfo.getEnd());			ossobj = client.getObject(go);		} catch (Exception e) {			e.printStackTrace();			throw new OperatorException(e.getMessage());		}		if(ossobj!=null){			return IntermedObjectUtil.convertIntermedObject(ossobj);		}else			return null;	}		public MultiInfo getNeccessPart(String bucketName, String fileName,			SKey key, long size) throws OperatorException {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,key.getKeyId(),key.getKeySecret(),config);		ListMultipartUploadsRequest listMultipartUploadsRequest = new ListMultipartUploadsRequest(bucketName);		listMultipartUploadsRequest.setPrefix(fileName);		long lastSize = size%Constants.FILE_PART_SIZE;		long partCount = size/Constants.FILE_PART_SIZE +1;		String uploadId = "";        try {			MultipartUploadListing uploadListing = client.listMultipartUploads(listMultipartUploadsRequest);			if(uploadListing !=null && uploadListing.getMultipartUploads()!=null){				for(MultipartUpload mu:uploadListing.getMultipartUploads()){					if(fileName.equals(mu.getKey())){						MultiInfo mi = new MultiInfo(bucketName,fileName);				        mi.setKey(mu.getUploadId());				        ListPartsRequest request = new ListPartsRequest(bucketName,fileName,mu.getUploadId());				        PartListing pl = client.listParts(request);				        List<Integer> has = new ArrayList<Integer>(); 				        if(pl!=null&&!ListUtil.isEmpty(pl.getParts())){				        	for(PartSummary ps:pl.getParts()){				        		has.add(ps.getPartNumber());				        		mi.addAL(ps.getETag(),new PartInfo(ps.getPartNumber()*Constants.FILE_PART_SIZE,ps.getSize()));				        	}				        }				        for(Integer i=0;i<partCount;i++){				        	if(has.contains(i))				        		continue;				        	if(i==partCount-1)								mi.addNP(new PartInfo(i*Constants.FILE_PART_SIZE,lastSize));							else								mi.addNP(new PartInfo(i*Constants.FILE_PART_SIZE,Constants.FILE_PART_SIZE));				        }				        return mi;					}				}			}			InitiateMultipartUploadRequest initUploadRequest = new InitiateMultipartUploadRequest(bucketName, fileName);	        InitiateMultipartUploadResult initResult = client.initiateMultipartUpload(initUploadRequest);	        uploadId = initResult.getUploadId();		} catch(Exception e) {			e.printStackTrace();			throw new OperatorException(e.getMessage());		}        if(StringUtil.isBlank(uploadId))        	return null;        MultiInfo mi = new MultiInfo(bucketName,fileName);        mi.setKey(uploadId);        for(Integer i=0;i<partCount;i++){        	if(i==partCount-1)				mi.addNP(new PartInfo(i*Constants.FILE_PART_SIZE,lastSize));			else				mi.addNP(new PartInfo(i*Constants.FILE_PART_SIZE,Constants.FILE_PART_SIZE));        }		return mi;	}		public boolean putPartObject(PartInfo partInfo,			IntermedObject intermedObject, SKey key, MultiInfo mi)			throws OperatorException {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,key.getKeyId(),key.getKeySecret(),config);		UploadPartRequest uploadPartRequest = new UploadPartRequest();        uploadPartRequest.setBucketName(mi.getBucketName());        uploadPartRequest.setKey(mi.getFileName());        uploadPartRequest.setUploadId(mi.getKey());        uploadPartRequest.setInputStream(intermedObject.getContext());        uploadPartRequest.setPartSize(partInfo.getSize());        Long pn = partInfo.getStart()/Constants.FILE_PART_SIZE;        uploadPartRequest.setPartNumber(pn.intValue());        try{        	UploadPartResult uploadPartResult = client.uploadPart(uploadPartRequest);        	PartInfo pi = mi.getPartInfo(partInfo.getStart());        	if(pi!=null&&uploadPartResult!=null&&uploadPartResult.getPartETag()!=null){        		mi.remove(pi);				mi.addAL(uploadPartResult.getPartETag().getETag(),pi);				String md5 = uploadPartResult.getPartETag().getETag();				if(StringUtil.isNotBlank(md5)&&md5.equalsIgnoreCase(intermedObject.getMD5String()))					return true;        	}        } catch(Exception e) {			e.printStackTrace();			throw new OperatorException(e.getMessage());		}		return false;	}		public boolean completeMultipartUpload(SKey key, MultiInfo mi)			throws OperatorException {		if(!mi.getnPartInfos().isEmpty())			return false;		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,key.getKeyId(),key.getKeySecret(),config);		List<PartETag> eTags = new ArrayList<PartETag>();		for(Entry<String,PartInfo> entry:mi.getAlPartInfos().entrySet()){			Long i = entry.getValue().getStart()/Constants.FILE_PART_SIZE;			eTags.add(new PartETag(i.intValue(),entry.getKey())); 		}		Collections.sort(eTags, new Comparator<PartETag>(){            public int compare(PartETag arg0, PartETag arg1) {                return arg0.getPartNumber() - arg1.getPartNumber();            }          });		CompleteMultipartUploadRequest completeMultipartUploadRequest = new CompleteMultipartUploadRequest(mi.getBucketName(),mi.getFileName(),mi.getKey(),eTags);        try{        	client.completeMultipartUpload(completeMultipartUploadRequest);        } catch(Exception e) {			e.printStackTrace();			throw new OperatorException(e.getMessage());		}		return true;	}		public long getFileSize(String bucketName, String fileName, SKey key) {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,key.getKeyId(),key.getKeySecret(),config);		try {			ObjectMetadata om = client.getObjectMetadata(bucketName, fileName);			if(om!=null)				return om.getContentLength();		} catch (OSSException e) {			e.printStackTrace();		} catch (ClientException e) {			e.printStackTrace();		}		return -1L;	}		public List<FileObject> listBucket(SKey key) throws OperatorException {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,key.getKeyId(),key.getKeySecret(),config);		List<FileObject> fileObjects = new ArrayList<FileObject>();		try {			for(Bucket bucket:client.listBuckets()){				FileObject fo = new FileObject();				fo.setBucketName(bucket.getName());				fo.setHasDirs(true);				fo.setName(bucket.getName());				fo.setMime("directory");				fo.setPath(bucket.getName());				fo.setTs(bucket.getCreationDate().getTime());				fo.setSize(0);				fo.setWrite(true);				fo.setRead(true);				fileObjects.add(fo);			}		}catch (Exception e) {			e.printStackTrace();			throw new OperatorException(e.getMessage());		}		return fileObjects;	}		public List<FileObject> listDirs(SKey skey, String bucketName,			String prefix) throws OperatorException {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,skey.getKeyId(),skey.getKeySecret(),config);		List<FileObject> fileObjects = new ArrayList<FileObject>();		try {			ListObjectsRequest lor = new ListObjectsRequest(bucketName);			if(StringUtil.isNotBlank(prefix))				lor.setPrefix(prefix+"/");			ObjectListing objectList = client.listObjects(lor);			if(objectList!=null){				List<String> allDirs = new ArrayList<String>();				List<String> hasDirs = new ArrayList<String>();				for(OSSObjectSummary os:objectList.getObjectSummaries()){					String filePath = os.getKey();					addDirPath(allDirs,filePath);					if(filePath.endsWith("/")){						FileObject fo = new FileObject();						filePath = filePath.substring(0,filePath.length()-1);						hasDirs.add(filePath);						fo.setBucketName(bucketName);						fo.setHasDirs(true);						fo.setName(filePath.substring(filePath.lastIndexOf("/")+1));						if(filePath.contains("/"))							fo.setParentPath(filePath.substring(0,filePath.lastIndexOf("/")));						fo.setMime("directory");						fo.setPath(filePath);						fo.setTs(os.getLastModified().getTime());						fo.setSize(os.getSize());						fo.setWrite(true);						fo.setRead(true);						fileObjects.add(fo);					}				}				allDirs.removeAll(hasDirs);				for(String path:allDirs){					FileObject fo = new FileObject();					fo.setBucketName(bucketName);					fo.setHasDirs(true);					fo.setName(path.substring(path.lastIndexOf("/")+1));					if(path.contains("/"))						fo.setParentPath(path.substring(0,path.lastIndexOf("/")));					fo.setMime("directory");					fo.setPath(path);					fo.setTs(DateUtil.getNow().getTime());					fo.setSize(0);					fo.setWrite(true);					fo.setRead(true);					fileObjects.add(fo);				}			}		}catch(Exception e){			e.printStackTrace();			throw new OperatorException(e.getMessage());		}		return fileObjects;	}			public List<FileObject> listObject(SKey skey, String bucketName,			String prefix) throws OperatorException {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,skey.getKeyId(),skey.getKeySecret(),config);		List<FileObject> fileObjects = new ArrayList<FileObject>();		try {			ListObjectsRequest lor = new ListObjectsRequest(bucketName);			if(StringUtil.isNotBlank(prefix)){				lor.setPrefix(prefix+"/");				lor.setDelimiter("/");			}else{				lor.setPrefix("");				lor.setDelimiter("/");			}			ObjectListing objectList = client.listObjects(lor);			if(objectList!=null){				for(OSSObjectSummary os:objectList.getObjectSummaries()){					String filePath = os.getKey();					if(!filePath.endsWith("/")){						FileObject fo = new FileObject();						fo.setBucketName(bucketName);						fo.setName(filePath.substring(filePath.lastIndexOf("/")+1));						if(filePath.contains("/"))							fo.setParentPath(filePath.substring(0,filePath.lastIndexOf("/")));						fo.setMime("file");						fo.setPath(filePath);						fo.setTs(os.getLastModified().getTime());						fo.setSize(os.getSize());						fo.setWrite(true);						fo.setRead(false);						fileObjects.add(fo);					}				}				for(String pathName:objectList.getCommonPrefixes()){					FileObject fo = new FileObject();					String filePath = pathName.substring(0,pathName.length()-1);					fo.setBucketName(bucketName);					fo.setHasDirs(true);					fo.setName(filePath.substring(filePath.lastIndexOf("/")+1));					if(filePath.contains("/"))						fo.setParentPath(filePath.substring(0,filePath.lastIndexOf("/")));					fo.setMime("directory");					fo.setPath(filePath);					fo.setTs(DateUtil.getNow().getTime());					fo.setSize(0);					fo.setWrite(true);					fo.setRead(true);					fileObjects.add(fo);				}			}		}catch(Exception e){			e.printStackTrace();			throw new OperatorException(e.getMessage());		}		return fileObjects;	}	public List<FileObject> listAllObject(SKey skey, String bucketName,			String prefix) throws OperatorException {		ClientConfiguration config = new ClientConfiguration();		OSSClient client = new OSSClient(Constants.ALI_OSS_URL,skey.getKeyId(),skey.getKeySecret(),config);		List<FileObject> fileObjects = new ArrayList<FileObject>();		try {			ListObjectsRequest lor = new ListObjectsRequest(bucketName);			if(StringUtil.isNotBlank(prefix))				lor.setPrefix(prefix+"/");			ObjectListing objectList = client.listObjects(lor);			if(objectList!=null){				for(OSSObjectSummary os:objectList.getObjectSummaries()){					String filePath = os.getKey();					if(filePath.endsWith("/")){						FileObject fo = new FileObject();						filePath = filePath.substring(0,filePath.length()-1);						fo.setBucketName(bucketName);						fo.setHasDirs(true);						fo.setName(filePath.substring(filePath.lastIndexOf("/")+1));						if(filePath.contains("/"))							fo.setParentPath(filePath.substring(0,filePath.lastIndexOf("/")));						fo.setMime("directory");						fo.setPath(filePath);						fo.setTs(os.getLastModified().getTime());						fo.setSize(os.getSize());						fo.setWrite(true);						fo.setRead(true);						fileObjects.add(fo);					}else{						FileObject fo = new FileObject();						fo.setBucketName(bucketName);						fo.setHasDirs(false);						fo.setName(filePath.substring(filePath.lastIndexOf("/")+1));						if(filePath.contains("/"))							fo.setParentPath(filePath.substring(0,filePath.lastIndexOf("/")));						fo.setMime("file");						fo.setPath(filePath);						fo.setTs(os.getLastModified().getTime());						fo.setSize(os.getSize());						fo.setWrite(true);						fo.setRead(false);						fileObjects.add(fo);					}				}			}		}catch(Exception e){			e.printStackTrace();			throw new OperatorException(e.getMessage());		}		return fileObjects;	}	private void addDirPath(List<String> allDirs,String path){		if(StringUtil.isNotBlank(path)){			String[] paths = path.split("/");			String ap = "";			for(int i=0;i<paths.length-1;i++){				if(i>0)					ap = ap+"/";				ap = ap+paths[i];				if(!allDirs.contains(ap))					allDirs.add(ap);			}		}	}}