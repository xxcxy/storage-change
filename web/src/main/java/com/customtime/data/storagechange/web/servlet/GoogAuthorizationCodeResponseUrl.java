package com.customtime.data.storagechange.web.servlet;

import com.google.api.client.http.GenericUrl;
import com.google.api.client.repackaged.com.google.common.base.Preconditions;
import com.google.api.client.util.Key;

public class GoogAuthorizationCodeResponseUrl extends GenericUrl{
	/** Authorization code generated by the authorization server or {@code null} for none. */
	  @Key
	  private String code;

	  /**
	   * State parameter matching the state parameter in the authorization request or {@code null} for
	   * none.
	   */
	  @Key
	  private String state;
	  /**
	   * Error code ({@code "invalid_request"}, {@code "unauthorized_client"}, {@code "access_denied"},
	   * {@code "unsupported_response_type"}, {@code "invalid_scope"}, {@code "server_error"},
	   * {@code "temporarily_unavailable"}, or an extension error code as specified in <a
	   * href="http://tools.ietf.org/html/rfc6749#section-8.5">Defining Additional Error Codes</a>) or
	   * {@code null} for none.
	   */
	  @Key
	  private String error;

	  /**
	   * Human-readable text providing additional information used to assist the client developer in
	   * understanding the error that occurred or {@code null} for none.
	   */
	  @Key("error_description")
	  private String errorDescription;

	  /**
	   * URI identifying a human-readable web page with information about the error used to provide the
	   * client developer with additional information about the error or {@code null} for none.
	   */
	  @Key("error_uri")
	  private String errorUri;

	  /**
	   * @param encodedResponseUrl encoded authorization code response URL
	   */
	  public GoogAuthorizationCodeResponseUrl(String encodedResponseUrl) {
	    super(encodedResponseUrl);
	    // either error or code but not both
	    Preconditions.checkArgument((code == null) != (error == null));
	  }

	  /**
	   * Returns the authorization code generated by the authorization server or {@code null} for none.
	   */
	  public final String getCode() {
	    return code;
	  }

	  /**
	   * Sets the authorization code generated by the authorization server or {@code null} for none.
	   *
	   * <p>
	   * Overriding is only supported for the purpose of calling the super implementation and changing
	   * the return type, but nothing else.
	   * </p>
	   */
	  public GoogAuthorizationCodeResponseUrl setCode(String code) {
	    this.code = code;
	    return this;
	  }

	  /**
	   * Returns the state parameter matching the state parameter in the authorization request or
	   * {@code null} for none.
	   */
	  public final String getState() {
	    return state;
	  }

	  /**
	   * Sets the state parameter matching the state parameter in the authorization request or
	   * {@code null} for none.
	   *
	   * <p>
	   * Overriding is only supported for the purpose of calling the super implementation and changing
	   * the return type, but nothing else.
	   * </p>
	   */
	  public GoogAuthorizationCodeResponseUrl setState(String state) {
	    this.state = state;
	    return this;
	  }

	  /**
	   * Returns the error code ({@code "invalid_request"}, {@code "unauthorized_client"},
	   * {@code "access_denied"}, {@code "unsupported_response_type"}, {@code "invalid_scope"},
	   * {@code "server_error"}, {@code "temporarily_unavailable"}, or an extension error code as
	   * specified in <a href="http://tools.ietf.org/html/rfc6749#section-8.5">Defining Additional Error
	   * Codes</a>) or {@code null} for none.
	   */
	  public final String getError() {
	    return error;
	  }

	  /**
	   * Sets the error code ({@code "invalid_request"}, {@code "unauthorized_client"},
	   * {@code "access_denied"}, {@code "unsupported_response_type"}, {@code "invalid_scope"},
	   * {@code "server_error"}, {@code "temporarily_unavailable"}, or an extension error code as
	   * specified in <a href="http://tools.ietf.org/html/rfc6749#section-8.5">Defining Additional Error
	   * Codes</a>) or {@code null} for none.
	   *
	   * <p>
	   * Overriding is only supported for the purpose of calling the super implementation and changing
	   * the return type, but nothing else.
	   * </p>
	   */
	  public GoogAuthorizationCodeResponseUrl setError(String error) {
	    this.error = error;
	    return this;
	  }

	  /**
	   * Returns the human-readable text providing additional information used to assist the client
	   * developer in understanding the error that occurred or {@code null} for none.
	   */
	  public final String getErrorDescription() {
	    return errorDescription;
	  }

	  /**
	   * Sets the human-readable text providing additional information used to assist the client
	   * developer in understanding the error that occurred or {@code null} for none.
	   *
	   * <p>
	   * Overriding is only supported for the purpose of calling the super implementation and changing
	   * the return type, but nothing else.
	   * </p>
	   */
	  public GoogAuthorizationCodeResponseUrl setErrorDescription(String errorDescription) {
	    this.errorDescription = errorDescription;
	    return this;
	  }

	  /**
	   * Returns the URI identifying a human-readable web page with information about the error used to
	   * provide the client developer with additional information about the error or {@code null} for
	   * none.
	   */
	  public final String getErrorUri() {
	    return errorUri;
	  }

	  /**
	   * Sets the URI identifying a human-readable web page with information about the error used to
	   * provide the client developer with additional information about the error or {@code null} for
	   * none.
	   *
	   * <p>
	   * Overriding is only supported for the purpose of calling the super implementation and changing
	   * the return type, but nothing else.
	   * </p>
	   */
	  public GoogAuthorizationCodeResponseUrl setErrorUri(String errorUri) {
	    this.errorUri = errorUri;
	    return this;
	  }

	  @Override
	  public GoogAuthorizationCodeResponseUrl set(String fieldName, Object value) {
	    return (GoogAuthorizationCodeResponseUrl) super.set(fieldName, value);
	  }

	  @Override
	  public GoogAuthorizationCodeResponseUrl clone() {
	    return (GoogAuthorizationCodeResponseUrl) super.clone();
	  }
	
}
